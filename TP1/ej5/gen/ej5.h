/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef EJ5_H_
#define EJ5_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Ej5 state machine.
*/
typedef struct Ej5 Ej5;

/*!
* Forward declaration of the data structure for the Ej5Iface interface scope.
*/
typedef struct Ej5Iface Ej5Iface;

/*!
* Forward declaration of the data structure for the Ej5Internal interface scope.
*/
typedef struct Ej5Internal Ej5Internal;

/*!
* Forward declaration of the data structure for the Ej5TimeEvents interface scope.
*/
typedef struct Ej5TimeEvents Ej5TimeEvents;

#ifdef __cplusplus
}
#endif

#include "../../../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'ej5'.
*/

#ifndef EJ5_EVENTQUEUE_BUFFERSIZE
#define EJ5_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef EJ5_IN_EVENTQUEUE_BUFFERSIZE
#define EJ5_IN_EVENTQUEUE_BUFFERSIZE EJ5_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef EJ5_INTERNAL_EVENTQUEUE_BUFFERSIZE
#define EJ5_INTERNAL_EVENTQUEUE_BUFFERSIZE EJ5_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define EJ5_STATE_COUNT 9

/*! Define dimension of the state configuration vector for orthogonal states. */
#define EJ5_MAX_ORTHOGONAL_STATES 2
/*! Define maximum number of time events that can be active at once */
#define EJ5_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_EJ5_PORTON_CERRADO 0
#define SCVI_EJ5_PORTON_CERRANDO 0
#define SCVI_EJ5_PORTON_ABRIENDO 0
#define SCVI_EJ5_PORTON_ABIERTO 0
#define SCVI_EJ5_PORTON_STOP1 0
#define SCVI_EJ5_PORTON_STOP2 0
#define SCVI_EJ5_LUZ_NOTITILAR 1
#define SCVI_EJ5_LUZ_TITILAR 1
#define SCVI_EJ5_LUZ_EMERGENCIA 1


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	Ej5_invalid_event = SC_INVALID_EVENT_VALUE,
	Ej5_evRemotoAbrir,
	Ej5_evRemotoCerrar,
	Ej5_evEmergencia,
	Ej5_evFinCarrera,
	Ej5_internal_siTitilar,
	Ej5_internal_siNoTitilar,
	Ej5_internal_siEmergencia,
	Ej5_ej5_Luz_Titilar_time_event_0,
	Ej5_ej5_Luz_Emergencia_time_event_0
} Ej5EventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	Ej5EventID name;
} ej5_event;

/*
 * Queue that holds the raised events.
 */
typedef struct ej5_eventqueue_s {
	ej5_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} ej5_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Ej5_last_state,
	Ej5_Porton_CERRADO,
	Ej5_Porton_CERRANDO,
	Ej5_Porton_ABRIENDO,
	Ej5_Porton_ABIERTO,
	Ej5_Porton_STOP1,
	Ej5_Porton_STOP2,
	Ej5_Luz_NoTitilar,
	Ej5_Luz_Titilar,
	Ej5_Luz_Emergencia
} Ej5States;


/*! Type declaration of the data structure for the Ej5Iface interface scope. */
struct Ej5Iface
{
	sc_boolean evRemotoAbrir_raised;
	sc_boolean evRemotoCerrar_raised;
	sc_boolean evEmergencia_raised;
	sc_boolean evFinCarrera_raised;
};


/* Declaration of constants for scope Ej5Iface. */
extern const sc_boolean EJ5_EJ5IFACE_OPEN;
extern const sc_boolean EJ5_EJ5IFACE_CLOSE;
extern const sc_boolean EJ5_EJ5IFACE_ON;
extern const sc_boolean EJ5_EJ5IFACE_OFF;
extern const sc_integer EJ5_EJ5IFACE_LEDR;
extern const sc_integer EJ5_EJ5IFACE_LEDG;
extern const sc_integer EJ5_EJ5IFACE_LEDB;


/*! Type declaration of the data structure for the Ej5Internal interface scope. */
struct Ej5Internal
{
	sc_boolean siTitilar_raised;
	sc_boolean siNoTitilar_raised;
	sc_boolean siEmergencia_raised;
};



/*! Type declaration of the data structure for the Ej5TimeEvents interface scope. */
struct Ej5TimeEvents
{
	sc_boolean ej5_Luz_Titilar_tev0_raised;
	sc_boolean ej5_Luz_Emergencia_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the Ej5 state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Ej5
{
	Ej5States stateConfVector[EJ5_MAX_ORTHOGONAL_STATES];
	Ej5Iface iface;
	Ej5Internal internal;
	Ej5TimeEvents timeEvents;
	sc_boolean isExecuting;
	sc_integer stateConfVectorPosition;
	ej5_eventqueue internal_event_queue;
	ej5_event internal_buffer[EJ5_INTERNAL_EVENTQUEUE_BUFFERSIZE];
	ej5_eventqueue in_event_queue;
	ej5_event in_buffer[EJ5_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Ej5 state machine data structures. Must be called before first usage.*/
extern void ej5_init(Ej5* handle);


/*! Activates the state machine. */
extern void ej5_enter(Ej5* handle);

/*! Deactivates the state machine. */
extern void ej5_exit(Ej5* handle);



/*! Raises a time event. */
extern void ej5_raise_time_event(Ej5* handle, sc_eventid evid);

/*! Raises the in event 'evRemotoAbrir' that is defined in the default interface scope. */ 
extern void ej5_raise_evRemotoAbrir(Ej5* handle);
/*! Raises the in event 'evRemotoCerrar' that is defined in the default interface scope. */ 
extern void ej5_raise_evRemotoCerrar(Ej5* handle);
/*! Raises the in event 'evEmergencia' that is defined in the default interface scope. */ 
extern void ej5_raise_evEmergencia(Ej5* handle);
/*! Raises the in event 'evFinCarrera' that is defined in the default interface scope. */ 
extern void ej5_raise_evFinCarrera(Ej5* handle);
/*! Gets the value of the variable 'OPEN' that is defined in the default interface scope. */ 
extern sc_boolean ej5_get_oPEN(const Ej5* handle);
/*! Gets the value of the variable 'CLOSE' that is defined in the default interface scope. */ 
extern sc_boolean ej5_get_cLOSE(const Ej5* handle);
/*! Gets the value of the variable 'ON' that is defined in the default interface scope. */ 
extern sc_boolean ej5_get_oN(const Ej5* handle);
/*! Gets the value of the variable 'OFF' that is defined in the default interface scope. */ 
extern sc_boolean ej5_get_oFF(const Ej5* handle);
/*! Gets the value of the variable 'LEDR' that is defined in the default interface scope. */ 
extern sc_integer ej5_get_lEDR(const Ej5* handle);
/*! Gets the value of the variable 'LEDG' that is defined in the default interface scope. */ 
extern sc_integer ej5_get_lEDG(const Ej5* handle);
/*! Gets the value of the variable 'LEDB' that is defined in the default interface scope. */ 
extern sc_integer ej5_get_lEDB(const Ej5* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean ej5_is_active(const Ej5* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean ej5_is_final(const Ej5* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean ej5_is_state_active(const Ej5* handle, Ej5States state);


#ifdef __cplusplus
}
#endif 

#endif /* EJ5_H_ */
