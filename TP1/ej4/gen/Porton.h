/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef PORTON_H_
#define PORTON_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Porton state machine.
*/
typedef struct Porton Porton;

/*!
* Forward declaration of the data structure for the PortonIface interface scope.
*/
typedef struct PortonIface PortonIface;

/*!
* Forward declaration of the data structure for the PortonInternal interface scope.
*/
typedef struct PortonInternal PortonInternal;

/*!
* Forward declaration of the data structure for the PortonTimeEvents interface scope.
*/
typedef struct PortonTimeEvents PortonTimeEvents;

#ifdef __cplusplus
}
#endif

#include "../inc/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'Porton'.
*/

#ifndef PORTON_EVENTQUEUE_BUFFERSIZE
#define PORTON_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef PORTON_IN_EVENTQUEUE_BUFFERSIZE
#define PORTON_IN_EVENTQUEUE_BUFFERSIZE PORTON_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef PORTON_INTERNAL_EVENTQUEUE_BUFFERSIZE
#define PORTON_INTERNAL_EVENTQUEUE_BUFFERSIZE PORTON_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define PORTON_STATE_COUNT 8

/*! Define dimension of the state configuration vector for orthogonal states. */
#define PORTON_MAX_ORTHOGONAL_STATES 2
/*! Define maximum number of time events that can be active at once */
#define PORTON_MAX_PARALLEL_TIME_EVENTS 2

/*! Define indices of states in the StateConfVector */
#define SCVI_PORTON_TECX_DEBOUNCE 0
#define SCVI_PORTON_TECX_NO_OPRIMIDO 0
#define SCVI_PORTON_TECX_OPRIMIDO 0
#define SCVI_PORTON_TECX_VALIDACION 0
#define SCVI_PORTON_MAIN_REGION_CERRADO 1
#define SCVI_PORTON_MAIN_REGION_ABRIENDO 1
#define SCVI_PORTON_MAIN_REGION_ABIERTO 1
#define SCVI_PORTON_MAIN_REGION_CERRANDO 1

/*
 * Union of all possible event value types.
 */
typedef union {
	sc_integer Porton_evTECXOprimido_value;
} porton_event_value;

/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	Porton_invalid_event = SC_INVALID_EVENT_VALUE,
	Porton_evTECXNoOprimido,
	Porton_evTECXOprimido,
	Porton_internal_siTECXOK,
	Porton_Porton_TECX_DEBOUNCE_time_event_0,
	Porton_Porton_main_region_ABIERTO_time_event_0,
	Porton_Porton_main_region_CERRANDO_time_event_0
} PortonEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	PortonEventID name;
	sc_boolean has_value;
	porton_event_value value;
} porton_event;

/*
 * Queue that holds the raised events.
 */
typedef struct porton_eventqueue_s {
	porton_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} porton_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Porton_last_state,
	Porton_TECX_DEBOUNCE,
	Porton_TECX_NO_OPRIMIDO,
	Porton_TECX_OPRIMIDO,
	Porton_TECX_VALIDACION,
	Porton_main_region_CERRADO,
	Porton_main_region_ABRIENDO,
	Porton_main_region_ABIERTO,
	Porton_main_region_CERRANDO
} PortonStates;


/*! Type declaration of the data structure for the PortonIface interface scope. */
struct PortonIface
{
	sc_boolean evTECXNoOprimido_raised;
	sc_boolean evTECXOprimido_raised;
	sc_integer evTECXOprimido_value;
};


/* Declaration of constants for scope PortonIface. */
extern const sc_integer PORTON_PORTONIFACE_LED1;
extern const sc_integer PORTON_PORTONIFACE_LED2;
extern const sc_integer PORTON_PORTONIFACE_LED3;
extern const sc_boolean PORTON_PORTONIFACE_LED_ON;
extern const sc_boolean PORTON_PORTONIFACE_LED_OFF;
extern const sc_integer PORTON_PORTONIFACE_TEC1;
extern const sc_integer PORTON_PORTONIFACE_TEC2;
extern const sc_integer PORTON_PORTONIFACE_TEC3;
extern const sc_integer PORTON_PORTONIFACE_TEC4;


/*! Type declaration of the data structure for the PortonInternal interface scope. */
struct PortonInternal
{
	sc_boolean siTECXOK_raised;
	sc_integer viTecla;
};



/*! Type declaration of the data structure for the PortonTimeEvents interface scope. */
struct PortonTimeEvents
{
	sc_boolean porton_TECX_DEBOUNCE_tev0_raised;
	sc_boolean porton_main_region_ABIERTO_tev0_raised;
	sc_boolean porton_main_region_CERRANDO_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the Porton state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Porton
{
	PortonStates stateConfVector[PORTON_MAX_ORTHOGONAL_STATES];
	PortonIface iface;
	PortonInternal internal;
	PortonTimeEvents timeEvents;
	sc_boolean isExecuting;
	sc_integer stateConfVectorPosition;
	porton_eventqueue internal_event_queue;
	porton_event internal_buffer[PORTON_INTERNAL_EVENTQUEUE_BUFFERSIZE];
	porton_eventqueue in_event_queue;
	porton_event in_buffer[PORTON_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Porton state machine data structures. Must be called before first usage.*/
extern void porton_init(Porton* handle);


/*! Activates the state machine. */
extern void porton_enter(Porton* handle);

/*! Deactivates the state machine. */
extern void porton_exit(Porton* handle);



/*! Raises a time event. */
extern void porton_raise_time_event(Porton* handle, sc_eventid evid);

/*! Raises the in event 'evTECXNoOprimido' that is defined in the default interface scope. */ 
extern void porton_raise_evTECXNoOprimido(Porton* handle);
/*! Raises the in event 'evTECXOprimido' that is defined in the default interface scope. */ 
extern void porton_raise_evTECXOprimido(Porton* handle, sc_integer value);
/*! Gets the value of the variable 'LED1' that is defined in the default interface scope. */ 
extern sc_integer porton_get_lED1(const Porton* handle);
/*! Gets the value of the variable 'LED2' that is defined in the default interface scope. */ 
extern sc_integer porton_get_lED2(const Porton* handle);
/*! Gets the value of the variable 'LED3' that is defined in the default interface scope. */ 
extern sc_integer porton_get_lED3(const Porton* handle);
/*! Gets the value of the variable 'LED_ON' that is defined in the default interface scope. */ 
extern sc_boolean porton_get_lED_ON(const Porton* handle);
/*! Gets the value of the variable 'LED_OFF' that is defined in the default interface scope. */ 
extern sc_boolean porton_get_lED_OFF(const Porton* handle);
/*! Gets the value of the variable 'TEC1' that is defined in the default interface scope. */ 
extern sc_integer porton_get_tEC1(const Porton* handle);
/*! Gets the value of the variable 'TEC2' that is defined in the default interface scope. */ 
extern sc_integer porton_get_tEC2(const Porton* handle);
/*! Gets the value of the variable 'TEC3' that is defined in the default interface scope. */ 
extern sc_integer porton_get_tEC3(const Porton* handle);
/*! Gets the value of the variable 'TEC4' that is defined in the default interface scope. */ 
extern sc_integer porton_get_tEC4(const Porton* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean porton_is_active(const Porton* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean porton_is_final(const Porton* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean porton_is_state_active(const Porton* handle, PortonStates state);


#ifdef __cplusplus
}
#endif 

#endif /* PORTON_H_ */
