/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef EJ7_H_
#define EJ7_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Ej7 state machine.
*/
typedef struct Ej7 Ej7;

/*!
* Forward declaration of the data structure for the Ej7Iface interface scope.
*/
typedef struct Ej7Iface Ej7Iface;

/*!
* Forward declaration of the data structure for the Ej7Internal interface scope.
*/
typedef struct Ej7Internal Ej7Internal;

/*!
* Forward declaration of the data structure for the Ej7TimeEvents interface scope.
*/
typedef struct Ej7TimeEvents Ej7TimeEvents;

#ifdef __cplusplus
}
#endif

#include "../../../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'ej7'.
*/

#ifndef EJ7_EVENTQUEUE_BUFFERSIZE
#define EJ7_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef EJ7_IN_EVENTQUEUE_BUFFERSIZE
#define EJ7_IN_EVENTQUEUE_BUFFERSIZE EJ7_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define EJ7_STATE_COUNT 11

/*! Define dimension of the state configuration vector for orthogonal states. */
#define EJ7_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define EJ7_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_EJ7_S_IDLE 0
#define SCVI_EJ7_S_MODO_OFF 0
#define SCVI_EJ7_S_COMENZAR_ON 0
#define SCVI_EJ7_S_TERMINAR_OFF 0
#define SCVI_EJ7_S_PUERTA_CERRADA_OFF 0
#define SCVI_EJ7_S_PUERTA_ABIERTA_OFF 0
#define SCVI_EJ7_S_MODO_ON 0
#define SCVI_EJ7_S_COMENZAR_OFF 0
#define SCVI_EJ7_S_TERMINAR_ON 0
#define SCVI_EJ7_S_PUERTA_ABIERTA_ON_ 0
#define SCVI_EJ7_S_PUERTA_CERRADA_ON 0


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	Ej7_invalid_event = SC_INVALID_EVENT_VALUE,
	Ej7_evPuertaAbierta,
	Ej7_evPuertaCerrada,
	Ej7_evComenzarTerminar,
	Ej7_evModoC,
	Ej7_evTECXoff,
	Ej7_ej7_S_TERMINAR_OFF_time_event_0
} Ej7EventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	Ej7EventID name;
} ej7_event;

/*
 * Queue that holds the raised events.
 */
typedef struct ej7_eventqueue_s {
	ej7_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} ej7_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Ej7_last_state,
	Ej7_S_IDLE,
	Ej7_S_MODO_OFF,
	Ej7_S_COMENZAR_ON,
	Ej7_S_TERMINAR_OFF,
	Ej7_S_PUERTA_CERRADA_OFF,
	Ej7_S_PUERTA_ABIERTA_OFF,
	Ej7_S_MODO_ON,
	Ej7_S_COMENZAR_OFF,
	Ej7_S_TERMINAR_ON,
	Ej7_S_PUERTA_ABIERTA_ON_,
	Ej7_S_PUERTA_CERRADA_ON
} Ej7States;


/*! Type declaration of the data structure for the Ej7Iface interface scope. */
struct Ej7Iface
{
	sc_boolean evPuertaAbierta_raised;
	sc_boolean evPuertaCerrada_raised;
	sc_boolean evComenzarTerminar_raised;
	sc_boolean evModoC_raised;
	sc_boolean evTECXoff_raised;
};


/* Declaration of constants for scope Ej7Iface. */
extern const sc_integer EJ7_EJ7IFACE_APAGAR;
extern const sc_integer EJ7_EJ7IFACE_PUERTACERRADA;
extern const sc_integer EJ7_EJ7IFACE_PUERTAABIERTA;
extern const sc_boolean EJ7_EJ7IFACE_LED_ON;
extern const sc_boolean EJ7_EJ7IFACE_LED_OFF;
extern const sc_integer EJ7_EJ7IFACE_LED_HORNO;
extern const sc_integer EJ7_EJ7IFACE_LED_PUERTA;
extern const sc_integer EJ7_EJ7IFACE_MODODEFAULT;
extern const sc_integer EJ7_EJ7IFACE_THRMODO;


/*! Type declaration of the data structure for the Ej7Internal interface scope. */
struct Ej7Internal
{
	sc_integer viModoCoccion;
};



/*! Type declaration of the data structure for the Ej7TimeEvents interface scope. */
struct Ej7TimeEvents
{
	sc_boolean ej7_S_TERMINAR_OFF_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the Ej7 state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Ej7
{
	Ej7States stateConfVector[EJ7_MAX_ORTHOGONAL_STATES];
	Ej7Iface iface;
	Ej7Internal internal;
	Ej7TimeEvents timeEvents;
	sc_boolean isExecuting;
	ej7_eventqueue in_event_queue;
	ej7_event in_buffer[EJ7_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Ej7 state machine data structures. Must be called before first usage.*/
extern void ej7_init(Ej7* handle);


/*! Activates the state machine. */
extern void ej7_enter(Ej7* handle);

/*! Deactivates the state machine. */
extern void ej7_exit(Ej7* handle);



/*! Raises a time event. */
extern void ej7_raise_time_event(Ej7* handle, sc_eventid evid);

/*! Raises the in event 'evPuertaAbierta' that is defined in the default interface scope. */ 
extern void ej7_raise_evPuertaAbierta(Ej7* handle);
/*! Raises the in event 'evPuertaCerrada' that is defined in the default interface scope. */ 
extern void ej7_raise_evPuertaCerrada(Ej7* handle);
/*! Raises the in event 'evComenzarTerminar' that is defined in the default interface scope. */ 
extern void ej7_raise_evComenzarTerminar(Ej7* handle);
/*! Raises the in event 'evModoC' that is defined in the default interface scope. */ 
extern void ej7_raise_evModoC(Ej7* handle);
/*! Raises the in event 'evTECXoff' that is defined in the default interface scope. */ 
extern void ej7_raise_evTECXoff(Ej7* handle);
/*! Gets the value of the variable 'Apagar' that is defined in the default interface scope. */ 
extern sc_integer ej7_get_apagar(const Ej7* handle);
/*! Gets the value of the variable 'PuertaCerrada' that is defined in the default interface scope. */ 
extern sc_integer ej7_get_puertaCerrada(const Ej7* handle);
/*! Gets the value of the variable 'PuertaAbierta' that is defined in the default interface scope. */ 
extern sc_integer ej7_get_puertaAbierta(const Ej7* handle);
/*! Gets the value of the variable 'LED_ON' that is defined in the default interface scope. */ 
extern sc_boolean ej7_get_lED_ON(const Ej7* handle);
/*! Gets the value of the variable 'LED_OFF' that is defined in the default interface scope. */ 
extern sc_boolean ej7_get_lED_OFF(const Ej7* handle);
/*! Gets the value of the variable 'LED_HORNO' that is defined in the default interface scope. */ 
extern sc_integer ej7_get_lED_HORNO(const Ej7* handle);
/*! Gets the value of the variable 'LED_PUERTA' that is defined in the default interface scope. */ 
extern sc_integer ej7_get_lED_PUERTA(const Ej7* handle);
/*! Gets the value of the variable 'ModoDefault' that is defined in the default interface scope. */ 
extern sc_integer ej7_get_modoDefault(const Ej7* handle);
/*! Gets the value of the variable 'ThrModo' that is defined in the default interface scope. */ 
extern sc_integer ej7_get_thrModo(const Ej7* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean ej7_is_active(const Ej7* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean ej7_is_final(const Ej7* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean ej7_is_state_active(const Ej7* handle, Ej7States state);


#ifdef __cplusplus
}
#endif 

#endif /* EJ7_H_ */
