/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef TP_H_
#define TP_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the TP state machine.
*/
typedef struct TP TP;

/*!
* Forward declaration of the data structure for the TPIface interface scope.
*/
typedef struct TPIface TPIface;

/*!
* Forward declaration of the data structure for the TPInternal interface scope.
*/
typedef struct TPInternal TPInternal;

/*!
* Forward declaration of the data structure for the TPTimeEvents interface scope.
*/
typedef struct TPTimeEvents TPTimeEvents;

#ifdef __cplusplus
}
#endif

#include "../inc/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'TP'.
*/

#ifndef TP_EVENTQUEUE_BUFFERSIZE
#define TP_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef TP_IN_EVENTQUEUE_BUFFERSIZE
#define TP_IN_EVENTQUEUE_BUFFERSIZE TP_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef TP_INTERNAL_EVENTQUEUE_BUFFERSIZE
#define TP_INTERNAL_EVENTQUEUE_BUFFERSIZE TP_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define TP_STATE_COUNT 9

/*! Define dimension of the state configuration vector for orthogonal states. */
#define TP_MAX_ORTHOGONAL_STATES 2
/*! Define maximum number of time events that can be active at once */
#define TP_MAX_PARALLEL_TIME_EVENTS 2

/*! Define indices of states in the StateConfVector */
#define SCVI_TP_TECX_DEBOUNCE 0
#define SCVI_TP_TECX_NO_OPRIMIDO 0
#define SCVI_TP_TECX_OPRIMIDO 0
#define SCVI_TP_TECX_VALIDACION 0
#define SCVI_TP_MAIN_REGION_INICIANDO 1
#define SCVI_TP_MAIN_REGION_MIDIENDO 1
#define SCVI_TP_MAIN_REGION_APAGADO_ITH_MENOR 1
#define SCVI_TP_MAIN_REGION_ENCENDIDO 1
#define SCVI_TP_MAIN_REGION_APAGADO_BOMBA_OFF 1

/*
 * Union of all possible event value types.
 */
typedef union {
	sc_integer TP_evTECXOprimido_value;
} tp_event_value;

/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	TP_invalid_event = SC_INVALID_EVENT_VALUE,
	TP_evTECXNoOprimido,
	TP_evTECXOprimido,
	TP_internal_siTECXOK,
	TP_TP_TECX_DEBOUNCE_time_event_0,
	TP_TP_main_region_APAGADO_ITH_MENOR_time_event_0,
	TP_TP_main_region_ENCENDIDO_time_event_0
} TPEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	TPEventID name;
	sc_boolean has_value;
	tp_event_value value;
} tp_event;

/*
 * Queue that holds the raised events.
 */
typedef struct tp_eventqueue_s {
	tp_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} tp_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	TP_last_state,
	TP_TECX_DEBOUNCE,
	TP_TECX_NO_OPRIMIDO,
	TP_TECX_OPRIMIDO,
	TP_TECX_VALIDACION,
	TP_main_region_INICIANDO,
	TP_main_region_MIDIENDO,
	TP_main_region_APAGADO_ITH_MENOR,
	TP_main_region_ENCENDIDO,
	TP_main_region_APAGADO_BOMBA_OFF
} TPStates;


/*! Type declaration of the data structure for the TPIface interface scope. */
struct TPIface
{
	sc_boolean evTECXNoOprimido_raised;
	sc_boolean evTECXOprimido_raised;
	sc_integer evTECXOprimido_value;
};


/* Declaration of constants for scope TPIface. */
extern const sc_integer TP_TPIFACE_LEDR;
extern const sc_integer TP_TPIFACE_LEDB;
extern const sc_integer TP_TPIFACE_LED1;
extern const sc_integer TP_TPIFACE_LED2;
extern const sc_integer TP_TPIFACE_LED3;
extern const sc_boolean TP_TPIFACE_LED_ON;
extern const sc_boolean TP_TPIFACE_LED_OFF;
extern const sc_integer TP_TPIFACE_TEC1;
extern const sc_integer TP_TPIFACE_TEC2;
extern const sc_integer TP_TPIFACE_TEC3;
extern const sc_integer TP_TPIFACE_TEC4;


/*! Type declaration of the data structure for the TPInternal interface scope. */
struct TPInternal
{
	sc_boolean siTECXOK_raised;
	sc_integer viTecla;
};



/*! Type declaration of the data structure for the TPTimeEvents interface scope. */
struct TPTimeEvents
{
	sc_boolean tP_TECX_DEBOUNCE_tev0_raised;
	sc_boolean tP_main_region_APAGADO_ITH_MENOR_tev0_raised;
	sc_boolean tP_main_region_ENCENDIDO_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the TP state machine.
 * This data structure has to be allocated by the client code. 
 */
struct TP
{
	TPStates stateConfVector[TP_MAX_ORTHOGONAL_STATES];
	TPIface iface;
	TPInternal internal;
	TPTimeEvents timeEvents;
	sc_boolean isExecuting;
	sc_integer stateConfVectorPosition;
	tp_eventqueue internal_event_queue;
	tp_event internal_buffer[TP_INTERNAL_EVENTQUEUE_BUFFERSIZE];
	tp_eventqueue in_event_queue;
	tp_event in_buffer[TP_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the TP state machine data structures. Must be called before first usage.*/
extern void tP_init(TP* handle);


/*! Activates the state machine. */
extern void tP_enter(TP* handle);

/*! Deactivates the state machine. */
extern void tP_exit(TP* handle);



/*! Raises a time event. */
extern void tP_raise_time_event(TP* handle, sc_eventid evid);

/*! Raises the in event 'evTECXNoOprimido' that is defined in the default interface scope. */ 
extern void tP_raise_evTECXNoOprimido(TP* handle);
/*! Raises the in event 'evTECXOprimido' that is defined in the default interface scope. */ 
extern void tP_raise_evTECXOprimido(TP* handle, sc_integer value);
/*! Gets the value of the variable 'LEDR' that is defined in the default interface scope. */ 
extern sc_integer tP_get_lEDR(const TP* handle);
/*! Gets the value of the variable 'LEDB' that is defined in the default interface scope. */ 
extern sc_integer tP_get_lEDB(const TP* handle);
/*! Gets the value of the variable 'LED1' that is defined in the default interface scope. */ 
extern sc_integer tP_get_lED1(const TP* handle);
/*! Gets the value of the variable 'LED2' that is defined in the default interface scope. */ 
extern sc_integer tP_get_lED2(const TP* handle);
/*! Gets the value of the variable 'LED3' that is defined in the default interface scope. */ 
extern sc_integer tP_get_lED3(const TP* handle);
/*! Gets the value of the variable 'LED_ON' that is defined in the default interface scope. */ 
extern sc_boolean tP_get_lED_ON(const TP* handle);
/*! Gets the value of the variable 'LED_OFF' that is defined in the default interface scope. */ 
extern sc_boolean tP_get_lED_OFF(const TP* handle);
/*! Gets the value of the variable 'TEC1' that is defined in the default interface scope. */ 
extern sc_integer tP_get_tEC1(const TP* handle);
/*! Gets the value of the variable 'TEC2' that is defined in the default interface scope. */ 
extern sc_integer tP_get_tEC2(const TP* handle);
/*! Gets the value of the variable 'TEC3' that is defined in the default interface scope. */ 
extern sc_integer tP_get_tEC3(const TP* handle);
/*! Gets the value of the variable 'TEC4' that is defined in the default interface scope. */ 
extern sc_integer tP_get_tEC4(const TP* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean tP_is_active(const TP* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean tP_is_final(const TP* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean tP_is_state_active(const TP* handle, TPStates state);


#ifdef __cplusplus
}
#endif 

#endif /* TP_H_ */
