/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef EJ3_H_
#define EJ3_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Ej3 state machine.
*/
typedef struct Ej3 Ej3;

/*!
* Forward declaration of the data structure for the Ej3Iface interface scope.
*/
typedef struct Ej3Iface Ej3Iface;

/*!
* Forward declaration of the data structure for the Ej3Internal interface scope.
*/
typedef struct Ej3Internal Ej3Internal;

/*!
* Forward declaration of the data structure for the Ej3TimeEvents interface scope.
*/
typedef struct Ej3TimeEvents Ej3TimeEvents;

#ifdef __cplusplus
}
#endif

#include "../../../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'ej3'.
*/

#ifndef EJ3_EVENTQUEUE_BUFFERSIZE
#define EJ3_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef EJ3_IN_EVENTQUEUE_BUFFERSIZE
#define EJ3_IN_EVENTQUEUE_BUFFERSIZE EJ3_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define EJ3_STATE_COUNT 6

/*! Define dimension of the state configuration vector for orthogonal states. */
#define EJ3_MAX_ORTHOGONAL_STATES 3
/*! Define maximum number of time events that can be active at once */
#define EJ3_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_EJ3_FORMA_SENOIDAL 0
#define SCVI_EJ3_FORMA_CUADRADA 0
#define SCVI_EJ3_FORMA_TRIANGULAR 0
#define SCVI_EJ3_MAGNITUD_TENSION 1
#define SCVI_EJ3_MAGNITUD_FRECUENCIA 1
#define SCVI_EJ3_DUMMYREG_DUMMY 2


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	Ej3_invalid_event = SC_INVALID_EVENT_VALUE,
	Ej3_evForma,
	Ej3_evCambiarMag,
	Ej3_evUp,
	Ej3_evDown,
	Ej3_ej3_dummyreg_dummy_time_event_0
} Ej3EventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	Ej3EventID name;
} ej3_event;

/*
 * Queue that holds the raised events.
 */
typedef struct ej3_eventqueue_s {
	ej3_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} ej3_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Ej3_last_state,
	Ej3_Forma_SENOIDAL,
	Ej3_Forma_CUADRADA,
	Ej3_Forma_TRIANGULAR,
	Ej3_Magnitud_TENSION,
	Ej3_Magnitud_FRECUENCIA,
	Ej3_dummyreg_dummy
} Ej3States;


/*! Type declaration of the data structure for the Ej3Iface interface scope. */
struct Ej3Iface
{
	sc_boolean evForma_raised;
	sc_boolean evCambiarMag_raised;
	sc_boolean evUp_raised;
	sc_boolean evDown_raised;
};


/* Declaration of constants for scope Ej3Iface. */
extern const sc_integer EJ3_EJ3IFACE_SENOIDAL;
extern const sc_integer EJ3_EJ3IFACE_CUADRADA;
extern const sc_integer EJ3_EJ3IFACE_TRIANGULAR;
extern const sc_integer EJ3_EJ3IFACE_V;
extern const sc_integer EJ3_EJ3IFACE_F;
extern const sc_integer EJ3_EJ3IFACE_INC;
extern const sc_integer EJ3_EJ3IFACE_DEC;


/*! Type declaration of the data structure for the Ej3Internal interface scope. */
struct Ej3Internal
{
	sc_integer viMag;
};



/*! Type declaration of the data structure for the Ej3TimeEvents interface scope. */
struct Ej3TimeEvents
{
	sc_boolean ej3_dummyreg_dummy_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the Ej3 state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Ej3
{
	Ej3States stateConfVector[EJ3_MAX_ORTHOGONAL_STATES];
	Ej3Iface iface;
	Ej3Internal internal;
	Ej3TimeEvents timeEvents;
	sc_boolean isExecuting;
	sc_integer stateConfVectorPosition;
	ej3_eventqueue in_event_queue;
	ej3_event in_buffer[EJ3_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Ej3 state machine data structures. Must be called before first usage.*/
extern void ej3_init(Ej3* handle);


/*! Activates the state machine. */
extern void ej3_enter(Ej3* handle);

/*! Deactivates the state machine. */
extern void ej3_exit(Ej3* handle);



/*! Raises a time event. */
extern void ej3_raise_time_event(Ej3* handle, sc_eventid evid);

/*! Raises the in event 'evForma' that is defined in the default interface scope. */ 
extern void ej3_raise_evForma(Ej3* handle);
/*! Raises the in event 'evCambiarMag' that is defined in the default interface scope. */ 
extern void ej3_raise_evCambiarMag(Ej3* handle);
/*! Raises the in event 'evUp' that is defined in the default interface scope. */ 
extern void ej3_raise_evUp(Ej3* handle);
/*! Raises the in event 'evDown' that is defined in the default interface scope. */ 
extern void ej3_raise_evDown(Ej3* handle);
/*! Gets the value of the variable 'SENOIDAL' that is defined in the default interface scope. */ 
extern sc_integer ej3_get_sENOIDAL(const Ej3* handle);
/*! Gets the value of the variable 'CUADRADA' that is defined in the default interface scope. */ 
extern sc_integer ej3_get_cUADRADA(const Ej3* handle);
/*! Gets the value of the variable 'TRIANGULAR' that is defined in the default interface scope. */ 
extern sc_integer ej3_get_tRIANGULAR(const Ej3* handle);
/*! Gets the value of the variable 'V' that is defined in the default interface scope. */ 
extern sc_integer ej3_get_v(const Ej3* handle);
/*! Gets the value of the variable 'F' that is defined in the default interface scope. */ 
extern sc_integer ej3_get_f(const Ej3* handle);
/*! Gets the value of the variable 'INC' that is defined in the default interface scope. */ 
extern sc_integer ej3_get_iNC(const Ej3* handle);
/*! Gets the value of the variable 'DEC' that is defined in the default interface scope. */ 
extern sc_integer ej3_get_dEC(const Ej3* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean ej3_is_active(const Ej3* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean ej3_is_final(const Ej3* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean ej3_is_state_active(const Ej3* handle, Ej3States state);


#ifdef __cplusplus
}
#endif 

#endif /* EJ3_H_ */
