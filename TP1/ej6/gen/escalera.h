/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef ESCALERA_H_
#define ESCALERA_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Escalera state machine.
*/
typedef struct Escalera Escalera;

/*!
* Forward declaration of the data structure for the EscaleraIface interface scope.
*/
typedef struct EscaleraIface EscaleraIface;

/*!
* Forward declaration of the data structure for the EscaleraInternal interface scope.
*/
typedef struct EscaleraInternal EscaleraInternal;

/*!
* Forward declaration of the data structure for the EscaleraTimeEvents interface scope.
*/
typedef struct EscaleraTimeEvents EscaleraTimeEvents;

#ifdef __cplusplus
}
#endif

#include "../../../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'escalera'.
*/

#ifndef ESCALERA_EVENTQUEUE_BUFFERSIZE
#define ESCALERA_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef ESCALERA_IN_EVENTQUEUE_BUFFERSIZE
#define ESCALERA_IN_EVENTQUEUE_BUFFERSIZE ESCALERA_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define ESCALERA_STATE_COUNT 11

/*! Define dimension of the state configuration vector for orthogonal states. */
#define ESCALERA_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define ESCALERA_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_ESCALERA_MAIN_REGION_IDLE 0
#define SCVI_ESCALERA_MAIN_REGION_UPSTAIRS 0
#define SCVI_ESCALERA_MAIN_REGION_DOWNSTAIRS 0
#define SCVI_ESCALERA_MAIN_REGION_VALIDATION_DOWN_STOP 0
#define SCVI_ESCALERA_MAIN_REGION_VALIDATION_UP_STOP 0
#define SCVI_ESCALERA_MAIN_REGION_VALIDATION_UP_START 0
#define SCVI_ESCALERA_MAIN_REGION_VALIDATION_DOWN_START 0
#define SCVI_ESCALERA_MAIN_REGION_VALIDATION_ADD_UP_1 0
#define SCVI_ESCALERA_MAIN_REGION_VALIDATION_ADD_UP_2 0
#define SCVI_ESCALERA_MAIN_REGION_VALIDATION_ADD_DOWN_1 0
#define SCVI_ESCALERA_MAIN_REGION_VALIDATION_ADD_DOWN_2 0


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	Escalera_invalid_event = SC_INVALID_EVENT_VALUE,
	Escalera_evSenseAboveInner,
	Escalera_evSenseAboveOuter,
	Escalera_evSenseBelowInner,
	Escalera_evSenseBelowOuter,
	Escalera_escalera_main_region_VALIDATION_DOWN_STOP_time_event_0,
	Escalera_escalera_main_region_VALIDATION_UP_STOP_time_event_0,
	Escalera_escalera_main_region_VALIDATION_UP_START_time_event_0,
	Escalera_escalera_main_region_VALIDATION_DOWN_START_time_event_0,
	Escalera_escalera_main_region_VALIDATION_ADD_UP_1_time_event_0,
	Escalera_escalera_main_region_VALIDATION_ADD_UP_2_time_event_0,
	Escalera_escalera_main_region_VALIDATION_ADD_DOWN_1_time_event_0,
	Escalera_escalera_main_region_VALIDATION_ADD_DOWN_2_time_event_0
} EscaleraEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	EscaleraEventID name;
} escalera_event;

/*
 * Queue that holds the raised events.
 */
typedef struct escalera_eventqueue_s {
	escalera_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} escalera_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Escalera_last_state,
	Escalera_main_region_IDLE,
	Escalera_main_region_UPSTAIRS,
	Escalera_main_region_DOWNSTAIRS,
	Escalera_main_region_VALIDATION_DOWN_STOP,
	Escalera_main_region_VALIDATION_UP_STOP,
	Escalera_main_region_VALIDATION_UP_START,
	Escalera_main_region_VALIDATION_DOWN_START,
	Escalera_main_region_VALIDATION_ADD_UP_1,
	Escalera_main_region_VALIDATION_ADD_UP_2,
	Escalera_main_region_VALIDATION_ADD_DOWN_1,
	Escalera_main_region_VALIDATION_ADD_DOWN_2
} EscaleraStates;


/*! Type declaration of the data structure for the EscaleraIface interface scope. */
struct EscaleraIface
{
	sc_boolean evSenseAboveInner_raised;
	sc_boolean evSenseAboveOuter_raised;
	sc_boolean evSenseBelowInner_raised;
	sc_boolean evSenseBelowOuter_raised;
};


/* Declaration of constants for scope EscaleraIface. */
extern const sc_integer ESCALERA_ESCALERAIFACE_V_IDLE;
extern const sc_integer ESCALERA_ESCALERAIFACE_V_FORW;
extern const sc_integer ESCALERA_ESCALERAIFACE_V_BACKW;
extern const sc_integer ESCALERA_ESCALERAIFACE_LED_UP;
extern const sc_integer ESCALERA_ESCALERAIFACE_LED_DOWN;
extern const sc_integer ESCALERA_ESCALERAIFACE_LED_STANDBY;
extern const sc_boolean ESCALERA_ESCALERAIFACE_ON;
extern const sc_boolean ESCALERA_ESCALERAIFACE_OFF;


/*! Type declaration of the data structure for the EscaleraInternal interface scope. */
struct EscaleraInternal
{
	sc_integer viAmountPeople;
};



/*! Type declaration of the data structure for the EscaleraTimeEvents interface scope. */
struct EscaleraTimeEvents
{
	sc_boolean escalera_main_region_VALIDATION_DOWN_STOP_tev0_raised;
	sc_boolean escalera_main_region_VALIDATION_UP_STOP_tev0_raised;
	sc_boolean escalera_main_region_VALIDATION_UP_START_tev0_raised;
	sc_boolean escalera_main_region_VALIDATION_DOWN_START_tev0_raised;
	sc_boolean escalera_main_region_VALIDATION_ADD_UP_1_tev0_raised;
	sc_boolean escalera_main_region_VALIDATION_ADD_UP_2_tev0_raised;
	sc_boolean escalera_main_region_VALIDATION_ADD_DOWN_1_tev0_raised;
	sc_boolean escalera_main_region_VALIDATION_ADD_DOWN_2_tev0_raised;
};






/*! 
 * Type declaration of the data structure for the Escalera state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Escalera
{
	EscaleraStates stateConfVector[ESCALERA_MAX_ORTHOGONAL_STATES];
	EscaleraIface iface;
	EscaleraInternal internal;
	EscaleraTimeEvents timeEvents;
	sc_boolean isExecuting;
	escalera_eventqueue in_event_queue;
	escalera_event in_buffer[ESCALERA_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Escalera state machine data structures. Must be called before first usage.*/
extern void escalera_init(Escalera* handle);


/*! Activates the state machine. */
extern void escalera_enter(Escalera* handle);

/*! Deactivates the state machine. */
extern void escalera_exit(Escalera* handle);



/*! Raises a time event. */
extern void escalera_raise_time_event(Escalera* handle, sc_eventid evid);

/*! Raises the in event 'evSenseAboveInner' that is defined in the default interface scope. */ 
extern void escalera_raise_evSenseAboveInner(Escalera* handle);
/*! Raises the in event 'evSenseAboveOuter' that is defined in the default interface scope. */ 
extern void escalera_raise_evSenseAboveOuter(Escalera* handle);
/*! Raises the in event 'evSenseBelowInner' that is defined in the default interface scope. */ 
extern void escalera_raise_evSenseBelowInner(Escalera* handle);
/*! Raises the in event 'evSenseBelowOuter' that is defined in the default interface scope. */ 
extern void escalera_raise_evSenseBelowOuter(Escalera* handle);
/*! Gets the value of the variable 'V_IDLE' that is defined in the default interface scope. */ 
extern sc_integer escalera_get_v_IDLE(const Escalera* handle);
/*! Gets the value of the variable 'V_FORW' that is defined in the default interface scope. */ 
extern sc_integer escalera_get_v_FORW(const Escalera* handle);
/*! Gets the value of the variable 'V_BACKW' that is defined in the default interface scope. */ 
extern sc_integer escalera_get_v_BACKW(const Escalera* handle);
/*! Gets the value of the variable 'LED_UP' that is defined in the default interface scope. */ 
extern sc_integer escalera_get_lED_UP(const Escalera* handle);
/*! Gets the value of the variable 'LED_DOWN' that is defined in the default interface scope. */ 
extern sc_integer escalera_get_lED_DOWN(const Escalera* handle);
/*! Gets the value of the variable 'LED_STANDBY' that is defined in the default interface scope. */ 
extern sc_integer escalera_get_lED_STANDBY(const Escalera* handle);
/*! Gets the value of the variable 'ON' that is defined in the default interface scope. */ 
extern sc_boolean escalera_get_oN(const Escalera* handle);
/*! Gets the value of the variable 'OFF' that is defined in the default interface scope. */ 
extern sc_boolean escalera_get_oFF(const Escalera* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean escalera_is_active(const Escalera* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean escalera_is_final(const Escalera* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean escalera_is_state_active(const Escalera* handle, EscaleraStates state);


#ifdef __cplusplus
}
#endif 

#endif /* ESCALERA_H_ */
